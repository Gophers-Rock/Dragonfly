package {{ .Package }}

import (
	"github.com/df-mc/atomic"
	"sync"
)

// HandlerManager manages a {{ .Package }}'s handlers.
type HandlerManager struct {
	sync.Mutex
	handlers []*atomic.Value[Handler]
}

type Handler interface {
	{{ range .Events -}}
	Handle{{ .Name }}(Event{{ .Name }})
	{{ end -}}
}

func (hm *HandlerManager) AddHandler(h Handler) func(Handler) Handler {
	hm.Lock()
	defer hm.Unlock()

	ah := atomic.NewValue[Handler](h)
	hm.handlers = append(hm.handlers, ah)

	return func(newHandler Handler) Handler {
		hm.Lock()
		defer hm.Unlock()

		if newHandler == nil {
			return ah.Swap(NopHandler{})
		}

		return ah.Swap(newHandler)
    	}
}
{{ range .Events }}
func (hm *HandlerManager) Handle{{ .Name }}(e Event{{ .Name }}) {
	for _, h := range hm.handlers {
		h.Load().Handle{{ .Name }}(e)
	}
}
{{ end }}
type NopHandler struct{}

{{ range .Events -}}
func (NopHandler) Handle{{ .Name}}(Event{{ .Name }}) {}
{{ end }}
